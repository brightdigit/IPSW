// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Get Firmwares For Device
    ///
    /// GetFirmwaresForDevice returns Firmwares for a given Device. An optional "type" get parameter may be
    /// specified to retrieve OTA Firmwares instead of normal IPSW files. 
    /// As of 2021-03-04, it is recommended that you use the "boards" property of the device, as devices can have multiple boards.
    ///
    /// - Remark: HTTP `GET /device/{identifier}`.
    /// - Remark: Generated from `#/paths//device/{identifier}/get(getDevice)`.
    func getDevice(_ input: Operations.getDevice.Input) async throws -> Operations.getDevice.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get Firmwares For Device
    ///
    /// GetFirmwaresForDevice returns Firmwares for a given Device. An optional "type" get parameter may be
    /// specified to retrieve OTA Firmwares instead of normal IPSW files. 
    /// As of 2021-03-04, it is recommended that you use the "boards" property of the device, as devices can have multiple boards.
    ///
    /// - Remark: HTTP `GET /device/{identifier}`.
    /// - Remark: Generated from `#/paths//device/{identifier}/get(getDevice)`.
    internal func getDevice(
        path: Operations.getDevice.Input.Path,
        query: Operations.getDevice.Input.Query,
        headers: Operations.getDevice.Input.Headers = .init()
    ) async throws -> Operations.getDevice.Output {
        try await getDevice(Operations.getDevice.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    internal enum Server1 {
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.ipsw.me/v4",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.ipsw.me/v4",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Board`.
        internal struct Board: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Board/boardconfig`.
            internal var boardconfig: Swift.String
            /// - Remark: Generated from `#/components/schemas/Board/platform`.
            internal var platform: Swift.String
            /// - Remark: Generated from `#/components/schemas/Board/cpid`.
            internal var cpid: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Board/bdid`.
            internal var bdid: Swift.Int
            /// Creates a new `Board`.
            ///
            /// - Parameters:
            ///   - boardconfig:
            ///   - platform:
            ///   - cpid:
            ///   - bdid:
            internal init(
                boardconfig: Swift.String,
                platform: Swift.String,
                cpid: Swift.Int,
                bdid: Swift.Int
            ) {
                self.boardconfig = boardconfig
                self.platform = platform
                self.cpid = cpid
                self.bdid = bdid
            }
            internal enum CodingKeys: String, CodingKey {
                case boardconfig
                case platform
                case cpid
                case bdid
            }
        }
        /// - Remark: Generated from `#/components/schemas/Firmware`.
        internal struct Firmware: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Firmware/identifier`.
            internal var identifier: Swift.String
            /// - Remark: Generated from `#/components/schemas/Firmware/version`.
            internal var version: Swift.String
            /// - Remark: Generated from `#/components/schemas/Firmware/buildid`.
            internal var buildid: Swift.String
            /// - Remark: Generated from `#/components/schemas/Firmware/sha1sum`.
            internal var sha1sum: Swift.String
            /// - Remark: Generated from `#/components/schemas/Firmware/md5sum`.
            internal var md5sum: Swift.String
            /// - Remark: Generated from `#/components/schemas/Firmware/filesize`.
            internal var filesize: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Firmware/url`.
            internal var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/Firmware/releasedate`.
            internal var releasedate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Firmware/uploaddate`.
            internal var uploaddate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Firmware/signed`.
            internal var signed: Swift.Bool
            /// Creates a new `Firmware`.
            ///
            /// - Parameters:
            ///   - identifier:
            ///   - version:
            ///   - buildid:
            ///   - sha1sum:
            ///   - md5sum:
            ///   - filesize:
            ///   - url:
            ///   - releasedate:
            ///   - uploaddate:
            ///   - signed:
            internal init(
                identifier: Swift.String,
                version: Swift.String,
                buildid: Swift.String,
                sha1sum: Swift.String,
                md5sum: Swift.String,
                filesize: Swift.Int,
                url: Swift.String,
                releasedate: Foundation.Date,
                uploaddate: Foundation.Date,
                signed: Swift.Bool
            ) {
                self.identifier = identifier
                self.version = version
                self.buildid = buildid
                self.sha1sum = sha1sum
                self.md5sum = md5sum
                self.filesize = filesize
                self.url = url
                self.releasedate = releasedate
                self.uploaddate = uploaddate
                self.signed = signed
            }
            internal enum CodingKeys: String, CodingKey {
                case identifier
                case version
                case buildid
                case sha1sum
                case md5sum
                case filesize
                case url
                case releasedate
                case uploaddate
                case signed
            }
        }
        /// - Remark: Generated from `#/components/schemas/Device`.
        internal struct Device: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Device/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Device/identifier`.
            internal var identifier: Swift.String
            /// - Remark: Generated from `#/components/schemas/Device/firmwares`.
            internal var firmwares: [Components.Schemas.Firmware]
            /// - Remark: Generated from `#/components/schemas/Device/boards`.
            internal var boards: [Components.Schemas.Board]
            /// - Remark: Generated from `#/components/schemas/Device/boardconfig`.
            internal var boardconfig: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Device/platform`.
            internal var platform: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Device/cpid`.
            internal var cpid: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Device/bdid`.
            internal var bdid: Swift.Int?
            /// Creates a new `Device`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - identifier:
            ///   - firmwares:
            ///   - boards:
            ///   - boardconfig:
            ///   - platform:
            ///   - cpid:
            ///   - bdid:
            internal init(
                name: Swift.String,
                identifier: Swift.String,
                firmwares: [Components.Schemas.Firmware],
                boards: [Components.Schemas.Board],
                boardconfig: Swift.String? = nil,
                platform: Swift.String? = nil,
                cpid: Swift.Int? = nil,
                bdid: Swift.Int? = nil
            ) {
                self.name = name
                self.identifier = identifier
                self.firmwares = firmwares
                self.boards = boards
                self.boardconfig = boardconfig
                self.platform = platform
                self.cpid = cpid
                self.bdid = bdid
            }
            internal enum CodingKeys: String, CodingKey {
                case name
                case identifier
                case firmwares
                case boards
                case boardconfig
                case platform
                case cpid
                case bdid
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Get Firmwares For Device
    ///
    /// GetFirmwaresForDevice returns Firmwares for a given Device. An optional "type" get parameter may be
    /// specified to retrieve OTA Firmwares instead of normal IPSW files. 
    /// As of 2021-03-04, it is recommended that you use the "boards" property of the device, as devices can have multiple boards.
    ///
    /// - Remark: HTTP `GET /device/{identifier}`.
    /// - Remark: Generated from `#/paths//device/{identifier}/get(getDevice)`.
    internal enum getDevice {
        internal static let id: Swift.String = "getDevice"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/device/{identifier}/GET/path`.
            internal struct Path: Sendable, Hashable {
                ///
                ///
                /// - Remark: Generated from `#/paths/device/{identifier}/GET/path/identifier`.
                internal var identifier: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - identifier:
                internal init(identifier: Swift.String) {
                    self.identifier = identifier
                }
            }
            internal var path: Operations.getDevice.Input.Path
            /// - Remark: Generated from `#/paths/device/{identifier}/GET/query`.
            internal struct Query: Sendable, Hashable {
                ///
                ///
                /// - Remark: Generated from `#/paths/device/{identifier}/GET/query/type`.
                internal var _type: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type:
                internal init(_type: Swift.String) {
                    self._type = _type
                }
            }
            internal var query: Operations.getDevice.Input.Query
            /// - Remark: Generated from `#/paths/device/{identifier}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDevice.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDevice.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.getDevice.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            internal init(
                path: Operations.getDevice.Input.Path,
                query: Operations.getDevice.Input.Query,
                headers: Operations.getDevice.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/headers/Access-Control-Allow-Methods`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Methods: Swift.String?
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/headers/Cache-Control`.
                    internal var Cache_hyphen_Control: Swift.String?
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/headers/Expires`.
                    internal var Expires: Swift.String?
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/headers/X-Data-Location`.
                    internal var X_hyphen_Data_hyphen_Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Methods:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    ///   - Cache_hyphen_Control:
                    ///   - Expires:
                    ///   - X_hyphen_Data_hyphen_Location:
                    internal init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: Swift.String? = nil,
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil,
                        Cache_hyphen_Control: Swift.String? = nil,
                        Expires: Swift.String? = nil,
                        X_hyphen_Data_hyphen_Location: Swift.String? = nil
                    ) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Methods = Access_hyphen_Control_hyphen_Allow_hyphen_Methods
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                        self.Cache_hyphen_Control = Cache_hyphen_Control
                        self.Expires = Expires
                        self.X_hyphen_Data_hyphen_Location = X_hyphen_Data_hyphen_Location
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.getDevice.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Device)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.Device {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/content/application\/x-plist`.
                    case application_x_hyphen_plist(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.application_x_hyphen_plist`.
                    ///
                    /// - Throws: An error if `self` is not `.application_x_hyphen_plist`.
                    /// - SeeAlso: `.application_x_hyphen_plist`.
                    internal var application_x_hyphen_plist: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .application_x_hyphen_plist(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/x-plist",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.getDevice.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.getDevice.Output.Ok.Headers = .init(),
                    body: Operations.getDevice.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//device/{identifier}/get(getDevice)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getDevice.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.getDevice.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            internal struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/404/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/404/headers/Access-Control-Allow-Methods`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Methods: Swift.String?
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/404/headers/Access-Control-Allow-Origin`.
                    internal var Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String?
                    /// - Remark: Generated from `#/paths/device/{identifier}/GET/responses/404/headers/X-Data-Location`.
                    internal var X_hyphen_Data_hyphen_Location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Methods:
                    ///   - Access_hyphen_Control_hyphen_Allow_hyphen_Origin:
                    ///   - X_hyphen_Data_hyphen_Location:
                    internal init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: Swift.String? = nil,
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: Swift.String? = nil,
                        X_hyphen_Data_hyphen_Location: Swift.String? = nil
                    ) {
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Methods = Access_hyphen_Control_hyphen_Allow_hyphen_Methods
                        self.Access_hyphen_Control_hyphen_Allow_hyphen_Origin = Access_hyphen_Control_hyphen_Allow_hyphen_Origin
                        self.X_hyphen_Data_hyphen_Location = X_hyphen_Data_hyphen_Location
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.getDevice.Output.NotFound.Headers
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                internal init(headers: Operations.getDevice.Output.NotFound.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Not Found
            ///
            /// - Remark: Generated from `#/paths//device/{identifier}/get(getDevice)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getDevice.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Operations.getDevice.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case application_x_hyphen_plist
            case xml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/x-plist":
                    self = .application_x_hyphen_plist
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .application_x_hyphen_plist:
                    return "application/x-plist"
                case .xml:
                    return "application/xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .application_x_hyphen_plist,
                    .xml
                ]
            }
        }
    }
}
