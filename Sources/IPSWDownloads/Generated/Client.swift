// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
/// Download current and previous versions of Apple's iOS Firmware, iTunes and OTA updates.
internal struct Client: APIProtocol {
    /// The underlying HTTP client.
    private let client: UniversalClient
    /// Creates a new client.
    /// - Parameters:
    ///   - serverURL: The server URL that the client connects to. Any server
    ///   URLs defined in the OpenAPI document are available as static methods
    ///   on the ``Servers`` type.
    ///   - configuration: A set of configuration values for the client.
    ///   - transport: A transport that performs HTTP operations.
    ///   - middlewares: A list of middlewares to call before the transport.
    internal init(
        serverURL: Foundation.URL,
        configuration: Configuration = .init(),
        transport: any ClientTransport,
        middlewares: [any ClientMiddleware] = []
    ) {
        self.client = .init(
            serverURL: serverURL,
            configuration: configuration,
            transport: transport,
            middlewares: middlewares
        )
    }
    private var converter: Converter {
        client.converter
    }
    /// Get Firmwares For Device
    ///
    /// GetFirmwaresForDevice returns Firmwares for a given Device. An optional "type" get parameter may be
    /// specified to retrieve OTA Firmwares instead of normal IPSW files. 
    /// As of 2021-03-04, it is recommended that you use the "boards" property of the device, as devices can have multiple boards.
    ///
    /// - Remark: HTTP `GET /device/{identifier}`.
    /// - Remark: Generated from `#/paths//device/{identifier}/get(getDevice)`.
    internal func getDevice(_ input: Operations.getDevice.Input) async throws -> Operations.getDevice.Output {
        try await client.send(
            input: input,
            forOperation: Operations.getDevice.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/device/{}",
                    parameters: [
                        input.path.identifier
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "type",
                    value: input.query._type
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.getDevice.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.getDevice.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Components.Schemas.Device.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.getDevice.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
}
