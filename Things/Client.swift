// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
/// Download current and previous versions of Apple's iOS Firmware, iTunes and OTA updates.
internal struct Client: APIProtocol {
    /// The underlying HTTP client.
    private let client: UniversalClient
    /// Creates a new client.
    /// - Parameters:
    ///   - serverURL: The server URL that the client connects to. Any server
    ///   URLs defined in the OpenAPI document are available as static methods
    ///   on the ``Servers`` type.
    ///   - configuration: A set of configuration values for the client.
    ///   - transport: A transport that performs HTTP operations.
    ///   - middlewares: A list of middlewares to call before the transport.
    internal init(
        serverURL: Foundation.URL,
        configuration: Configuration = .init(),
        transport: any ClientTransport,
        middlewares: [any ClientMiddleware] = []
    ) {
        self.client = .init(
            serverURL: serverURL,
            configuration: configuration,
            transport: transport,
            middlewares: middlewares
        )
    }
    private var converter: Converter {
        client.converter
    }
    /// V 4 . Get Firmwares For Device
    ///
    /// GetFirmwaresForDevice returns Firmwares for a given Device. An optional "type" get parameter may be
    /// specified to retrieve OTA Firmwares instead of normal IPSW files. 
    /// As of 2021-03-04, it is recommended that you use the "boards" property of the device, as devices can have multiple boards.
    ///
    /// - Remark: HTTP `GET /device/{identifier}`.
    /// - Remark: Generated from `#/paths//device/{identifier}/get(V 4 . Get Firmwares For Device)`.
    internal func V_space_4_space__period__space_Get_space_Firmwares_space_For_space_Device(_ input: Operations.V_space_4_space__period__space_Get_space_Firmwares_space_For_space_Device.Input) async throws -> Operations.V_space_4_space__period__space_Get_space_Firmwares_space_For_space_Device.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Get_space_Firmwares_space_For_space_Device.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/device/{}",
                    parameters: [
                        input.path.identifier
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "type",
                    value: input.query._type
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Get_space_Firmwares_space_For_space_Device.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Get_space_Firmwares_space_For_space_Device.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Get_space_Firmwares_space_For_space_Device.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Get_space_Firmwares_space_For_space_Device.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Get Devices
    ///
    /// GetDevices returns a list of all devices known to IPSW Downloads
    /// If you wish to only get devices which have Firmware Keys, add the ?keysOnly=true parameter.
    /// As of 2021-03-04, it is recommended that you use the "boards" property of each device, as devices can have multiple boards.
    ///
    /// - Remark: HTTP `GET /devices`.
    /// - Remark: Generated from `#/paths//devices/get(V 4 . Get Devices)`.
    internal func V_space_4_space__period__space_Get_space_Devices(_ input: Operations.V_space_4_space__period__space_Get_space_Devices.Input) async throws -> Operations.V_space_4_space__period__space_Get_space_Devices.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Get_space_Devices.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/devices",
                    parameters: []
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "keysOnly",
                    value: input.query.keysOnly
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Get_space_Devices.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Get_space_Devices.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Get_space_Devices.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Download IPSW
    ///
    /// DownloadIPSW redirects to download an IPSW as specified by its identifier and buildid
    ///
    /// - Remark: HTTP `GET /ipsw/download/{identifier}/{buildid}`.
    /// - Remark: Generated from `#/paths//ipsw/download/{identifier}/{buildid}/get(V 4 . Download IPSW)`.
    internal func V_space_4_space__period__space_Download_space_IPSW(_ input: Operations.V_space_4_space__period__space_Download_space_IPSW.Input) async throws -> Operations.V_space_4_space__period__space_Download_space_IPSW.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Download_space_IPSW.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/ipsw/download/{}/{}",
                    parameters: [
                        input.path.identifier,
                        input.path.buildid
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 302:
                    let headers: Operations.V_space_4_space__period__space_Download_space_IPSW.Output.Found.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Download_space_IPSW.Output.Found.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "text/html"
                        ]
                    )
                    switch chosenContentType {
                    case "text/html":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .text_html_charset_utf_hyphen_8(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .found(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Download_space_IPSW.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Get IPSW Information
    ///
    /// GetIPSWInformation returns all known information for an IPSW as specified by identifier and buildid
    ///
    /// - Remark: HTTP `GET /ipsw/{identifier}/{buildid}`.
    /// - Remark: Generated from `#/paths//ipsw/{identifier}/{buildid}/get(V 4 . Get IPSW Information)`.
    internal func V_space_4_space__period__space_Get_space_IPSW_space_Information(_ input: Operations.V_space_4_space__period__space_Get_space_IPSW_space_Information.Input) async throws -> Operations.V_space_4_space__period__space_Get_space_IPSW_space_Information.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Get_space_IPSW_space_Information.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/ipsw/{}/{}",
                    parameters: [
                        input.path.identifier,
                        input.path.buildid
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Get_space_IPSW_space_Information.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Get_space_IPSW_space_Information.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Get_space_IPSW_space_Information.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Get_space_IPSW_space_Information.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Get IPSW List For Version
    ///
    /// GetIPSWListForVersion finds all IPSW files for a given iOS version
    ///
    /// - Remark: HTTP `GET /ipsw/{version}`.
    /// - Remark: Generated from `#/paths//ipsw/{version}/get(V 4 . Get IPSW List For Version)`.
    internal func V_space_4_space__period__space_Get_space_IPSW_space_List_space_For_space_Version(_ input: Operations.V_space_4_space__period__space_Get_space_IPSW_space_List_space_For_space_Version.Input) async throws -> Operations.V_space_4_space__period__space_Get_space_IPSW_space_List_space_For_space_Version.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Get_space_IPSW_space_List_space_For_space_Version.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/ipsw/{}",
                    parameters: [
                        input.path.version
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Get_space_IPSW_space_List_space_For_space_Version.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Get_space_IPSW_space_List_space_For_space_Version.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Get_space_IPSW_space_List_space_For_space_Version.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Get_space_IPSW_space_List_space_For_space_Version.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Download Itunes
    ///
    /// DownloadItunes redirects to download an iTunes installer as specified by its platform and version, and architecture for windows
    ///
    /// - Remark: HTTP `GET /itunes/download/{platform}/{version}`.
    /// - Remark: Generated from `#/paths//itunes/download/{platform}/{version}/get(V 4 . Download Itunes)`.
    internal func V_space_4_space__period__space_Download_space_Itunes(_ input: Operations.V_space_4_space__period__space_Download_space_Itunes.Input) async throws -> Operations.V_space_4_space__period__space_Download_space_Itunes.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Download_space_Itunes.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/itunes/download/{}/{}",
                    parameters: [
                        input.path.platform,
                        input.path.version
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "arch",
                    value: input.query.arch
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 302:
                    let headers: Operations.V_space_4_space__period__space_Download_space_Itunes.Output.Found.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Download_space_Itunes.Output.Found.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "text/html"
                        ]
                    )
                    switch chosenContentType {
                    case "text/html":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .text_html_charset_utf_hyphen_8(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .found(.init(
                        headers: headers,
                        body: body
                    ))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Find Itunes
    ///
    /// FindItunes finds FindItunes versions for a given platform. specify either "windows" or "macOS"
    ///
    /// - Remark: HTTP `GET /itunes/{platform}`.
    /// - Remark: Generated from `#/paths//itunes/{platform}/get(V 4 . Find Itunes)`.
    internal func V_space_4_space__period__space_Find_space_Itunes(_ input: Operations.V_space_4_space__period__space_Find_space_Itunes.Input) async throws -> Operations.V_space_4_space__period__space_Find_space_Itunes.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Find_space_Itunes.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/itunes/{}",
                    parameters: [
                        input.path.platform
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Find_space_Itunes.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Find_space_Itunes.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Find_space_Itunes.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Find_space_Itunes.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Keys Device List
    ///
    /// KeysDeviceList returns the firmwares which have keys for a given device
    ///
    /// - Remark: HTTP `GET /keys/device/{identifier}`.
    /// - Remark: Generated from `#/paths//keys/device/{identifier}/get(V 4 . Keys Device List)`.
    internal func V_space_4_space__period__space_Keys_space_Device_space_List(_ input: Operations.V_space_4_space__period__space_Keys_space_Device_space_List.Input) async throws -> Operations.V_space_4_space__period__space_Keys_space_Device_space_List.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Keys_space_Device_space_List.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/keys/device/{}",
                    parameters: [
                        input.path.identifier
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Keys_space_Device_space_List.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Keys_space_Device_space_List.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Keys_space_Device_space_List.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Keys_space_Device_space_List.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Keys For IPSW
    ///
    /// KeysForIPSW returns FirmwareKeys for a given IPSW
    ///
    /// - Remark: HTTP `GET /keys/ipsw/{identifier}/{buildid}`.
    /// - Remark: Generated from `#/paths//keys/ipsw/{identifier}/{buildid}/get(V 4 . Keys For IPSW)`.
    internal func V_space_4_space__period__space_Keys_space_For_space_IPSW(_ input: Operations.V_space_4_space__period__space_Keys_space_For_space_IPSW.Input) async throws -> Operations.V_space_4_space__period__space_Keys_space_For_space_IPSW.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Keys_space_For_space_IPSW.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/keys/ipsw/{}/{}",
                    parameters: [
                        input.path.identifier,
                        input.path.buildid
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Keys_space_For_space_IPSW.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Keys_space_For_space_IPSW.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Keys_space_For_space_IPSW.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Keys_space_For_space_IPSW.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Identify Model
    ///
    /// IdentifyModel finds the identifier of a given model number
    ///
    /// - Remark: HTTP `GET /model/{model}`.
    /// - Remark: Generated from `#/paths//model/{model}/get(V 4 . Identify Model)`.
    internal func V_space_4_space__period__space_Identify_space_Model(_ input: Operations.V_space_4_space__period__space_Identify_space_Model.Input) async throws -> Operations.V_space_4_space__period__space_Identify_space_Model.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Identify_space_Model.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/model/{}",
                    parameters: [
                        input.path.model
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Identify_space_Model.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Identify_space_Model.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Identify_space_Model.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Identify_space_Model.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . OTA Documentation
    ///
    /// OTADocumentation returns the documentation for a given device type and version
    ///
    /// - Remark: HTTP `GET /ota/documentation/{device}/{version}`.
    /// - Remark: Generated from `#/paths//ota/documentation/{device}/{version}/get(V 4 . OTA Documentation)`.
    internal func V_space_4_space__period__space_OTA_space_Documentation(_ input: Operations.V_space_4_space__period__space_OTA_space_Documentation.Input) async throws -> Operations.V_space_4_space__period__space_OTA_space_Documentation.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_OTA_space_Documentation.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/ota/documentation/{}/{}",
                    parameters: [
                        input.path.device,
                        input.path.version
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_OTA_space_Documentation.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        ),
                        X_hyphen_Frame_hyphen_Options: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Frame-Options",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_OTA_space_Documentation.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "text/html"
                        ]
                    )
                    switch chosenContentType {
                    case "text/html":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .html(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_OTA_space_Documentation.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_OTA_space_Documentation.Output.NotFound.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_OTA_space_Documentation.Output.NotFound.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .notFound(.init(
                        headers: headers,
                        body: body
                    ))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Download OTA
    ///
    /// DownloadOTA redirects to download an OTA Firmware as specified by its identifier, buildid and optionally prerequisite
    ///
    /// - Remark: HTTP `GET /ota/download/{identifier}/{buildid}`.
    /// - Remark: Generated from `#/paths//ota/download/{identifier}/{buildid}/get(V 4 . Download OTA)`.
    internal func V_space_4_space__period__space_Download_space_OTA(_ input: Operations.V_space_4_space__period__space_Download_space_OTA.Input) async throws -> Operations.V_space_4_space__period__space_Download_space_OTA.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Download_space_OTA.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/ota/download/{}/{}",
                    parameters: [
                        input.path.identifier,
                        input.path.buildid
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prerequisite",
                    value: input.query.prerequisite
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 302:
                    let headers: Operations.V_space_4_space__period__space_Download_space_OTA.Output.Found.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Download_space_OTA.Output.Found.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "text/html"
                        ]
                    )
                    switch chosenContentType {
                    case "text/html":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .text_html_charset_utf_hyphen_8(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .found(.init(
                        headers: headers,
                        body: body
                    ))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Get OTA Information
    ///
    /// GetOTAInformation returns all known information for an OTA specified by its identifier and build (and optionally
    /// prerequisite firmware)
    ///
    /// - Remark: HTTP `GET /ota/{identifier}/{buildid}`.
    /// - Remark: Generated from `#/paths//ota/{identifier}/{buildid}/get(V 4 . Get OTA Information)`.
    internal func V_space_4_space__period__space_Get_space_OTA_space_Information(_ input: Operations.V_space_4_space__period__space_Get_space_OTA_space_Information.Input) async throws -> Operations.V_space_4_space__period__space_Get_space_OTA_space_Information.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Get_space_OTA_space_Information.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/ota/{}/{}",
                    parameters: [
                        input.path.identifier,
                        input.path.buildid
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                try converter.setQueryItemAsURI(
                    in: &request,
                    style: .form,
                    explode: true,
                    name: "prerequisite",
                    value: input.query.prerequisite
                )
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Get_space_OTA_space_Information.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Get_space_OTA_space_Information.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Get_space_OTA_space_Information.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Get OTA List For Version
    ///
    /// GetOTAListForVersion finds all OTA files for a given iOS version
    ///
    /// - Remark: HTTP `GET /ota/{version}`.
    /// - Remark: Generated from `#/paths//ota/{version}/get(V 4 . Get OTA List For Version)`.
    internal func V_space_4_space__period__space_Get_space_OTA_space_List_space_For_space_Version(_ input: Operations.V_space_4_space__period__space_Get_space_OTA_space_List_space_For_space_Version.Input) async throws -> Operations.V_space_4_space__period__space_Get_space_OTA_space_List_space_For_space_Version.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Get_space_OTA_space_List_space_For_space_Version.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/ota/{}",
                    parameters: [
                        input.path.version
                    ]
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Get_space_OTA_space_List_space_For_space_Version.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Get_space_OTA_space_List_space_For_space_Version.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Get_space_OTA_space_List_space_For_space_Version.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                case 404:
                    let headers: Operations.V_space_4_space__period__space_Get_space_OTA_space_List_space_For_space_Version.Output.NotFound.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    return .notFound(.init(headers: headers))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// V 4 . Releases
    ///
    /// Releases returns the release timeline of all entities in the IPSW Downloads database
    ///
    /// - Remark: HTTP `GET /releases`.
    /// - Remark: Generated from `#/paths//releases/get(V 4 . Releases)`.
    internal func V_space_4_space__period__space_Releases(_ input: Operations.V_space_4_space__period__space_Releases.Input) async throws -> Operations.V_space_4_space__period__space_Releases.Output {
        try await client.send(
            input: input,
            forOperation: Operations.V_space_4_space__period__space_Releases.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/releases",
                    parameters: []
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                converter.setAcceptHeader(
                    in: &request.headerFields,
                    contentTypes: input.headers.accept
                )
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    let headers: Operations.V_space_4_space__period__space_Releases.Output.Ok.Headers = .init(
                        Access_hyphen_Control_hyphen_Allow_hyphen_Methods: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Methods",
                            as: Swift.String.self
                        ),
                        Access_hyphen_Control_hyphen_Allow_hyphen_Origin: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Access-Control-Allow-Origin",
                            as: Swift.String.self
                        ),
                        Cache_hyphen_Control: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Cache-Control",
                            as: Swift.String.self
                        ),
                        Expires: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "Expires",
                            as: Swift.String.self
                        ),
                        X_hyphen_Data_hyphen_Location: try converter.getOptionalHeaderFieldAsURI(
                            in: response.headerFields,
                            name: "X-Data-Location",
                            as: Swift.String.self
                        )
                    )
                    let contentType = converter.extractContentTypeIfPresent(in: response.headerFields)
                    let body: Operations.V_space_4_space__period__space_Releases.Output.Ok.Body
                    let chosenContentType = try converter.bestContentType(
                        received: contentType,
                        options: [
                            "application/json",
                            "application/x-plist",
                            "application/xml"
                        ]
                    )
                    switch chosenContentType {
                    case "application/json":
                        body = try await converter.getResponseBodyAsJSON(
                            Operations.V_space_4_space__period__space_Releases.Output.Ok.Body.jsonPayload.self,
                            from: responseBody,
                            transforming: { value in
                                .json(value)
                            }
                        )
                    case "application/x-plist":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .application_x_hyphen_plist(value)
                            }
                        )
                    case "application/xml":
                        body = try converter.getResponseBodyAsBinary(
                            OpenAPIRuntime.HTTPBody.self,
                            from: responseBody,
                            transforming: { value in
                                .xml(value)
                            }
                        )
                    default:
                        preconditionFailure("bestContentType chose an invalid content type.")
                    }
                    return .ok(.init(
                        headers: headers,
                        body: body
                    ))
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
}
